name: python
aliases: |
  alias httpsrv="python3 -m http.server"  # serve current directory on port 8000
automations:
  - name: clean
    content:
      description: "Clean python cache and build artifacts"
      env: osx
      steps:
      - title: Clean __pycache__, pyc, pyo files
        description: 
        runner: shell
        content: find . | grep -E "(__pycache__|\.pyc|\.pyo$)" | xargs rm -rf
      - title: Clean build and dist folders
        runner: shell
        content: find . | grep -E "(build|dist)" | xargs rm -rf

  - name: setup
    content:
      description: "Setup python"
      env: osx
      steps:
      - title: install Python
        description: 'Install Python on this machine'
        runner: shell
        content: |
          # check if python3 AND python is installed first, if yes print message and leave
          if python3 -V > /dev/null && python -V > /dev/null; then
            echo "Python is already installed, skipping..."
            exit 0
          fi
          brew install python3

          # make sure python3 installed, if not print message and exit 1
          if ! python3 -V > /dev/null; then
            echo "Python3 failed to install"
            exit 1
          fi

          # link python to python3 if it's not setup already
          if ! python -V > /dev/null; then
            echo "Linking python to python3"
            rm -rf /usr/local/bin/python
            ln -s /opt/homebrew/bin/python3 /usr/local/bin/python
          fi

          # make sure python is installed, if not print message and exit 1
          if ! python -V > /dev/null; then
            echo "Python failed to install"
            exit 1
          fi

      - title: Python VSCode plugins
        description: (Optional) If you have VSCode installed, this will install some useful plugins
        runner: shell
        approval_message: Do you whish to install VSCode plugins for Python development?
        content: |
          # check that code is installed, if not print message and exit 1
          if ! code -v > /dev/null; then
            echo "VSCode is not installed, skipping..."
            exit 1
          fi

          # install vscode plugins for python
          code --install-extension ms-python.python
          code --install-extension ms-python.vscode-pylance
          code --install-extension ms-toolsai.jupyter
          code --install-extension njpwerner.autodocstring
          code --install-extension ms-toolsai.jupyter-keymap
          code --install-extension ms-toolsai.jupyter-renderers

      - title: Install miniconda
        runner: cocmd
        approval_message: Do you whish to install Mini-Conda (virtual environement management)?
        content: python.setup.miniconda
  - name: setup.miniconda
    content:
      description: "Setup miniconda"
      env: osx
      steps:
      - title: install miniconda
        runner: shell
        content: |
          # check that directory ~/miniconda/ installed, if yes print message and exit 0
          if [ -d ~/miniconda/ ]; then
            echo "Conda is already installed, skipping..."
            exit 0
          fi

          rm -r ~/miniconda/

          # install conda on mac on this machine
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O ~/miniconda.sh
          bash ~/miniconda.sh -b -p $HOME/miniconda
      - title: update shell path
        runner: shell
        content: |    
          # for zsh
          if [ -f ~/.zshrc ]; then
            if ! grep -q "miniconda" ~/.zshrc; then
              echo 'export PATH="$PATH:$HOME/miniconda/bin"' >> ~/.zshrc
            fi
            echo please run "source ~/.zshrc" to make conda available to you
          fi

          # for bash
          if [ -f ~/.bashrc ]; then
            if ! grep -q "miniconda" ~/.bashrc; then
              echo 'export PATH="$PATH:$HOME/miniconda/bin"' >> ~/.bashrc
            fi
            echo please run "source ~/.bashrc" to make conda available to you
          fi
          

  - name: setup-poetry
    content:
      description: "Setup Poetry for Python development"
      env: osx
      steps:
      - title: Install Poetry
        description: Install poetry for Python development
        runner: shell
        content: |
          # check if poetry is installed first, if yes print message and leave
          if poetry -V > /dev/null; then
            echo "Poetry is already installed, skipping..."
            exit 0
          fi
          
          echo "installing poetry on mac on this machine..."
          curl -sSL https://install.python-poetry.org | python3 -
          
          # Add Poetry to your PATH
          if [ -f ~/.zshrc ]; then
            echo 'export PATH="$PATH:$HOME/.poetry/bin"' >> ~/.zshrc
            echo 'export PATH="$PATH:$HOME/.local/bin"' >> ~/.zshrc
          fi
          echo 'export PATH="$PATH:$HOME/.poetry/bin"' >> ~/.bashrc
          echo 'export PATH="$PATH:$HOME/.local/bin"' >> ~/.bashrc
          echo 'export PATH="$PATH:$HOME/.poetry/bin"' >> ~/.bash_profile
          echo 'export PATH="$PATH:$HOME/.local/bin"' >> ~/.bash_profile
          echo 'export PATH="$PATH:$HOME/.poetry/bin"' >> ~/.profile
          echo 'export PATH="$PATH:$HOME/.local/bin"' >> ~/.profile

          export PATH="$PATH:$HOME/.poetry/bin
          export PATH="$PATH:$HOME/.local/bin
          
          poetry self update
          poetry completions bash >> ~/.bash_completion

          # if you are using zsh
          if [ -f ~/.zshrc ]; then
        
            # add to zshrc: fpath+=~/.zfunc and autoload -Uz compinit && compinit
            echo 'fpath+=~/.zfunc' >> ~/.zshrc
            echo 'autoload -Uz compinit && compinit' >> ~/.zshrc

            mkdir -p $ZSH_CUSTOM/plugins/poetry
            poetry completions zsh > $ZSH_CUSTOM/plugins/poetry/_poetry
          fi
  
  - name: conda-env-create
    content:
      description: Create a conda environment
      params:
        - name: py_version
          save: false
        - name: name
          save: false
      steps:
      - title: create env
        description: Create a conda environment
        runner: shell
        content: |
          conda create -n {{name}} python={{py_version}}

          


